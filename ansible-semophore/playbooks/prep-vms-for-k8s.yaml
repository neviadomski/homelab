---
- name: Prepare all VMs for Kubernetes deploymentn
  hosts: k8s_all

  tasks:
    - name: Set up bridge traffic
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop:
        - |
          cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilter
          EOF
        - sudo modprobe overlay
        - sudo modprobe br_netfilter
        - |
          cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOF
        - sudo sysctl --system
      register: cmd_return
      failed_when:
        cmd_return.rc != 0

    - name: Disable swap
      ansible.builtin.shell: sudo swapoff -a && sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      register: cmd_return
      failed_when:
        cmd_return.rc != 0

    - name: Install containerd
      ansible.builtin.import_tasks: templates/download_and_install_module.yaml
      vars:
        module: containerd
        version: "{{ containerd_version }}"
        checksum: true
        archive: true

    - name: Install containerd.service
      ansible.builtin.import_tasks: templates/download_and_install_module.yaml
      vars:
        module: containerd_service
        version:
        checksum: false
        archive: false

    - name: Start containerd
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop:
        - systemctl daemon-reload
        - systemctl enable --now containerd
      register: cmd_return
      failed_when:
        cmd_return.rc != 0

    - name: Install runc
      ansible.builtin.import_tasks: templates/download_and_install_module.yaml
      vars:
        module: runc
        version: "{{ runc_version }}"
        checksum: true
        archive: false
        install_cmd: "{{ 'install -m 755 ' ~ temp_dir ~ filename['runc'] ~ ' ' ~ install_path['runc'] ~ 'runc'}}"

    - name: Runc cgroupv2 changes
      become: true
      ansible.builtin.apt:
        name: dbus-user-session
        state: present
      loop:
        - dbus
        - dbus-user-session

    - name: Install cni
      ansible.builtin.import_tasks: templates/download_and_install_module.yaml
      vars:
        module: cni
        version: "{{ cni_version }}"
        checksum: true
        archive: true

    - name: Generate containerd config
      become: true
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop:
        - mkdir -p /etc/containerd
        - containerd config default > /etc/containerd/config.toml
        - sed -i "s/SystemdCgroup = false/SystemdCgroup = true/g" /etc/containerd/config.toml
        - systemctl restart containerd
      register: cmd_return
      failed_when:
        cmd_return.rc != 0

    - name: Update packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: true

    - name: Install prerequisites for Kube
      become: true
      ansible.builtin.apt:
        force_apt_get: true
        name: "{{ packages }}"
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
          - jq
          - ipvsadm

    - name: Set up ipvs
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop:
        - sudo mkdir -p /etc/sysconfig/modules
        - |
          cat <<EOF | sudo tee /etc/sysconfig/modules/ipvs.modules
          #!/bin/bash
          modprobe -- ip_vs
          modprobe -- ip_vs_rr
          modprobe -- ip_vs_wrr
          modprobe -- ip_vs_sh
          modprobe -- nf_conntrack
          EOF
        - sudo chmod 755 /etc/sysconfig/modules/ipvs.modules && bash /etc/sysconfig/modules/ipvs.modules && lsmod | grep -e ip_vs -e nf_conntrack
      register: cmd_return
      failed_when:
        cmd_return.rc != 0

    - name: Add kubernetes repo
      ansible.builtin.shell:
        cmd: '{{ item  }}'
      loop:
        - "curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ kube_version }}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
        - "echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kube_version }}/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list"
      register: cmd_return
      failed_when:
        cmd_return.rc != 0

    - name: Install kubeadm, kubectl, kubelet
      become: true
      ansible.builtin.apt:
        force_apt_get: true
        update_cache: true
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - "kubelet={{ kube_minor_version }}"
          - "kubeadm={{ kube_minor_version }}"
          - "kubectl={{ kube_minor_version }}"

    - name: Hold kubeadm
      become: true
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Reboot machine with all defaults
      ansible.builtin.reboot:
